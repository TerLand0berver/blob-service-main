name: Docker

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/chatnio-blob-service
  DOCKER_BUILDKIT: 1
  BUILDKIT_PROGRESS: plain

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List repository contents
        run: |
          echo "Repository contents:"
          ls -la
          echo "Dockerfile contents:"
          cat Dockerfile
          echo "Requirements.txt contents:"
          cat requirements.txt || echo "requirements.txt not found"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Print environment information
        run: |
          docker version
          docker buildx version
          docker info
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "Workspace: ${{ github.workspace }}"

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create logs directory
        run: mkdir -p build-logs

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          no-cache: true
          outputs: type=docker
        continue-on-error: true

      - name: Check build status and collect logs
        run: |
          echo "Build exit code: ${{ steps.docker_build.outcome }}"
          echo "Build result: ${{ steps.docker_build.outputs.metadata }}" > build-logs/build-result.txt
          docker images > build-logs/docker-images.txt
          if [ "${{ steps.docker_build.outcome }}" == "failure" ]; then
            echo "Build failed. Collecting debug information..."
            docker buildx debug > build-logs/buildx-debug.txt
            echo "::error::Docker build failed. Check the logs for details."
          fi

      - name: Push Docker image
        if: steps.docker_build.outcome == 'success' && github.event_name != 'pull_request'
        run: docker push ${{ steps.meta.outputs.tags }}

      - name: Run Trivy vulnerability scanner
        if: steps.docker_build.outcome == 'success'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          output: 'build-logs/trivy-results.txt'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: build-logs/
          if-no-files-found: warn

      - name: Move cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
